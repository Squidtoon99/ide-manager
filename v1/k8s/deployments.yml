apiVersion: v1
kind: Service
metadata:
  name: "vs-{user}-svc"
spec:
  ports:
    - port: 8080
      targetPort: http
      name: http
    - port: 3000
      targetPort: fs
      name: fs
  selector:
    app: vs-{user}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "vs-{user}-demo"
  labels:
    app: vs-{user}
    type: ide
spec:
  serviceName: "vs-{user}-demo"
  replicas: 1
  selector:
    matchLabels:
      app: vs-{user}
      type: ide
  template:
    metadata:
      labels:
        app: vs-{user}
        type: ide
    spec:
      securityContext:
        fsGroup: 664
      containers:
        - name: server
          image: squidtoon99/vs-java:1.5
          imagePullPolicy: IfNotPresent
          args: [ '--auth', 'none', '--disable-getting-started-override', '--extensions-dir', '/extensions' ] # override default extensions dir b/c mount overrides it
          resources:
            requests:
              memory: 256M
            limits:
              memory: 1G
          ports:
            - name: http
              containerPort: 8080
          livenessProbe:
            httpGet:
              port: http
              path: /healthz
          readinessProbe:
            httpGet:
              port: http
              path: /healthz
          volumeMounts:
            - mountPath: /home/coder
              name: data
        - name: fs
          image: squidtoon99/tiny-fs:1.9.5
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 0
            allowPrivilegeEscalation: true
          env:
            - name: VS_USER
              value: "{user}"
          envFrom:
            - secretRef:
                name: creds
          resources:
              requests:
                  memory: 128M
              limits:
                  memory: 256M
          ports:
            - name: fs
              containerPort: 3000
          livenessProbe:
            httpGet:
              port: fs
              path: /
          readinessProbe:
            httpGet:
              port: fs
              path: /
          volumeMounts:
            - mountPath: /home/coder
              name: data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: data-pv-claim-{user}
  volumeClaimTemplates:
    - metadata:
        name: data-pv-claim-{user}
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 500Mi
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: "vs-{user}-ingress"
spec:
  entryPoints: [ ]
  routes: #/app 
    - kind: Rule
      match: PathPrefix(`/app/{user}`) && HeadersRegexp(`Cookie`, `proxy-token-{user}={token}`)
      priority: 100
      services:
        - kind: Service
          name: "vs-{user}-svc"
          port: 8080
      middlewares:
        - name: app-stripprefix-{user}
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: app-stripprefix-{user}
spec:
  stripPrefix:
    prefixes:
      - /app/{user}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-pv-claim-{user}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi
  storageClassName: standard-rwo